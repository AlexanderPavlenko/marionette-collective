#!/usr/bin/env ruby

require 'mcollective'

oparser = MCollective::Optionparser.new({})

options = oparser.parse{|parser, options|
    parser.define_head "Shows an inventory for a given node"
    parser.banner = "Usage: mc-inventory [options] node"
}

if ARGV.length > 0
    node = ARGV.shift
else
    STDERR.puts("Please specify a node")
    exit 1
end

# Monkey patching array with a in_groups_of method
# that walks an array in groups, pass a block to 
# call the block on each sub array
class Array
    def in_groups_of(chunk_size, padded_with=nil)
        arr = self.clone

        # how many to add
        padding = chunk_size - (arr.size % chunk_size)

        # pad at the end
        arr.concat([padded_with] * padding)

        # how many chunks we'll make
        count = arr.size / chunk_size

        # make that many arrays
        result = []
        count.times {|s| result <<  arr[s * chunk_size, chunk_size]}

        if block_given?
            result.each{|a| yield(a)}
        else
            result
        end
    end
end


begin
    client = MCollective::Client.new(options[:config])

    options[:filter]["identity"] << node
    client.options = options

    stats = client.req("inventory", "discovery") do |resp|
        puts "Inventory for #{resp[:senderid]}:"
        puts

        puts "   Agents:"
        resp[:body][:agents].sort.in_groups_of(3, "") do |agents|
            puts "      %-15s %-15s %-15s" % agents
        end
        puts

        puts "   Configuration Management Classes:"
        resp[:body][:classes].sort.in_groups_of(2, "") do |klasses|
            puts "      %-30s %-30s" % klasses
        end
        puts

        puts "   Facts:"
        resp[:body][:facts].sort_by{|f| f[0]}.each do |f|
            puts "      #{f[0]} => #{f[1]}"
        end

        break
    end
rescue Exception => e
    puts "Could not show inventory for node #{node}: #{e}"
end

# vi:tabstop=4:expandtab:ai
